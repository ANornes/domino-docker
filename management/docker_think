#!/bin/bash

###########################################################################
# Nash!Com Domino Docker Script                                           #
# Version 1.0.0 22.12.2018                                                #
#                                                                         #
# (C) Copyright Daniel Nashed/NashCom 2018                                #
# Feedback domino_unix@nashcom.de                                         #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#      http://www.apache.org/licenses/LICENSE-2.0                         #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
###########################################################################

SCRIPT_NAME=$0
PARAM1=$1
PARAM2=$2
PARAM3=$3

# Default Configuration parameters
DOCKER_CONTAINER=ibmcom/domino
DOCKER_IMAGE_NAME=ibmcom/domino
DOCKER_IMAGE_VERSION=10.0.0
DOCKER_FILE=dockerfile

DOCKER_HOSTNAME=ibm-domino
DOMINO_SHUTDOWN_TIMEOUT=60
#DOCKER_NETWORK=--network=host
DOCKER_PORTS="-p 1352:1352 -p 80:80 -p 443:443"
DOCKER_VOLUMES="-v notesdata:/local/notesdata"

# Configure software download location.
# You can either use your own software repository remotely.
# Or use a local software image hosted via NGINX temporary image.
# By default NIGX is used hosting software from the local "software" directory.

#DOWNLOAD_FROM=http://192.168.1.1

# Configuration for NGINX container
SOFTWARE_USE_NGINX=0
SOFTWARE_DIR=$PWD/software
SOFTWARE_PORT=7777
SOFTWARE_CONTAINER=ibmsoftware

# Get configuration from config file

DOCKER_SCRIPT_VERSION=1.0.0

CONFIG_FILE=`dirname $0`/config_`basename $0 | cut -f 2 -d _`
if [ -e "$CONFIG_FILE" ]; then
 . $CONFIG_FILE
fi

# Special configuration

BUILDTIME=`date +"%d.%m.%Y %H:%M:%S"`

DOCKER_TAG_LATEST="$DOCKER_IMAGE_NAME:latest"

if [ -z "$DOWNLOAD_FROM" ]; then
  if [ -z "$SOFTWARE_USE_NGINX" ]; then
    SOFTWARE_USE_NGINX=1
  fi
fi

DOCKER_IMAGE_NAMEVERSION=$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VERSION

if [ -z "$DOCKER_TAG_LATEST" ]; then
  DOCKER_IMAGE=$DOCKER_IMAGE_NAMEVERSION
  DOCKER_TAG_LATEST_CMD=""
else
  DOCKER_IMAGE=$DOCKER_TAG_LATEST
  DOCKER_TAG_LATEST_CMD="-t $DOCKER_TAG_LATEST"
fi

print_delim ()
{
  echo "------------------------------------------------------------------------------------------"
}

config_warnings ()
{
  DOCKER_STORAGE_DIRVER=`docker info 2>/dev/null |grep "Storage Driver: " | grep "Storage Driver: " | cut -d ":" -f2 | awk '{ sub(/^[ ]+/, ""); print }'`

  if [ "$DOCKER_STORAGE_DIRVER" = "overlay" ]; then 
    echo
    echo "Warning: It's strongly recommended to use the 'Overlay2' driver!"
  fi
  
  if [ ! -z "$DOCKER_CONTAINER_ID" ]; then
    if [ ! "$DOCKER_CONTAINER_ID" = "$DOCKER_IMAGE_ID" ]; then
      echo
      echo "Info: New Image Version available!"
    fi
  fi
  
  return 0
}

nginx_start ()
{
  # Create a nginx container hosting software download locally

  # Check if we already have this container in status exited
  STATUS="$(docker inspect --format "{{ .State.Status }}" $SOFTWARE_CONTAINER 2>/dev/null)"

  if [ -z "$STATUS" ]; then
    echo "Creating Docker container: $SOFTWARE_CONTAINER"
    docker run --name $SOFTWARE_CONTAINER -p $SOFTWARE_PORT:80 -v $SOFTWARE_DIR:/usr/share/nginx/html:ro -d nginx
  elif [ "$STATUS" = "exited" ]; then
    echo "Starting existing Docker container: $SOFTWARE_CONTAINER"
    docker start $SOFTWARE_CONTAINER
  fi

  echo "Starting Docker container: $SOFTWARE_CONTAINER"
  # Start local nginx container to host SW Repository
  SOFTWARE_REPO_IP="$(docker inspect --format "{{ .NetworkSettings.IPAddress }}" $SOFTWARE_CONTAINER 2>/dev/null)"
  if [ -z "$SOFTWARE_REPO_IP" ]; then
    echo "Unable to locate software repository."
  else
    DOWNLOAD_FROM=http://$SOFTWARE_REPO_IP
    echo "Hosting IBM Software repository on $DOWNLOAD_FROM"
  fi
  echo
}

nginx_stop ()
{
  # Stop and remove SW repository
  docker stop $SOFTWARE_CONTAINER
  docker container rm $SOFTWARE_CONTAINER
  echo "Stopped & Removed Software Repository Container"
  echo
}

docker_show_status ()
{
  if [ -z "$DOCKER_STATUS" ]; then
   echo "Status: notexisting"
  else    
    echo Status: "$DOCKER_STATUS"
  fi

  return 0
}

docker_status ()
{
  DOCKER_STATUS="$(docker inspect --format "{{ .State.Status }}" $DOCKER_CONTAINER 2>/dev/null)"
}

docker_inspect_image ()
{
  DOCKER_IMAGE_ID="$(docker inspect --format "{{.Id}}" $DOCKER_IMAGE 2>/dev/null)"
  DOCKER_IMAGE_VERSION="$(docker inspect --format "{{ .Config.Labels.version }}" $DOCKER_IMAGE 2>/dev/null)"
  DOCKER_IMAGE_BUILDTIME="$(docker inspect --format "{{ .Config.Labels.buildtime }}" $DOCKER_IMAGE 2>/dev/null)" 
  
  return 0
}

docker_inspect ()
{
  DOCKER_STATUS="$(docker inspect --format "{{ .State.Status }}" $DOCKER_CONTAINER 2>/dev/null)"
  if [ -z "$DOCKER_STATUS" ]; then return 0; fi

  DOCKER_CONTAINER_NAME="$(docker inspect --format "{{ .Name }}" $DOCKER_CONTAINER | cut -d/ -f2 2>/dev/null)"
  DOCKER_CONTAINER_IMAGE="$(docker inspect --format "{{ .Config.Image }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_HOSTNAME="$(docker inspect --format "{{ .Config.Hostname }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_DRIVER="$(docker inspect --format "{{ .Driver }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_PLATFORM="$(docker inspect --format "{{ .Platform }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_NETWORKMODE="$(docker inspect --format "{{ .HostConfig.NetworkMode }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_IPAddress="$(docker inspect --format "{{ .NetworkSettings.IPAddress }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_ID="$(docker inspect --format "{{ .Image }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_VERSION="$(docker inspect --format "{{ .Config.Labels.version }}" $DOCKER_CONTAINER 2>/dev/null)"
  DOCKER_CONTAINER_BUILDTIME="$(docker inspect --format "{{ .Config.Labels.buildtime }}" $DOCKER_CONTAINER 2>/dev/null)"

  return 0
}

docker_inspect_extras ()
{
  if [ "$DOCKER_STATUS" = "running" ]; then 
    DOCKER_CONTAINER_OS_VERSION=`docker exec -it $DOCKER_CONTAINER cat /etc/redhat-release`
    DOCKER_CONTAINER_OS_KERNEL=`docker exec -it $DOCKER_CONTAINER uname -r`
    DOCKER_CONTAINER_UPTIME=`docker exec -it $DOCKER_CONTAINER uptime -p`
  fi
}

docker_show_inspect ()
{
  if [ -z "$DOCKER_STATUS" ]; then 
    if [ -z "$DOCKER_IMAGE_ID" ]; then 
      echo "Docker container and image not found"
    else
      echo "Docker container not found"
    fi
    return 0
  fi

  docker_inspect_extras

  print_delim
  echo " Status        :  $DOCKER_STATUS"
  echo " Name          :  $DOCKER_CONTAINER_NAME"
  echo " Image         :  $DOCKER_CONTAINER_IMAGE"

  if [ "$DOCKER_IMAGE_VERSION" = "$DOCKER_CONTAINER_VERSION" ]; then 
    echo " Version       :  $DOCKER_IMAGE_VERSION"
  else
    echo " Version CNT   :  $DOCKER_CONTAINER_VERSION"
    echo " Version IMG   :  $DOCKER_IMAGE_VERSION"
  fi

  if [ "$DOCKER_IMAGE_BUILDTIME" = "$DOCKER_CONTAINER_BUILDTIME" ]; then 
    echo " BuildTime     :  $DOCKER_IMAGE_BUILDTIME"
  else
    echo " BuildTime CNT :  $DOCKER_CONTAINER_BUILDTIME"
    echo " BuildTime IMG :  $DOCKER_IMAGE_BUILDTIME"
  fi
  
  echo " Uptime        :  $DOCKER_CONTAINER_UPTIME"
  echo " Hostname      :  $DOCKER_CONTAINER_HOSTNAME"
  echo " NetworkMode   :  $DOCKER_CONTAINER_NETWORKMODE"
  echo " IPAddress     :  $DOCKER_CONTAINER_IPAddress"
  echo " Platform      :  $DOCKER_CONTAINER_PLATFORM"
  echo " Container OS  :  $DOCKER_CONTAINER_OS_VERSION"
  echo " Kernel        :  $DOCKER_CONTAINER_OS_KERNEL"
  echo " Driver        :  $DOCKER_CONTAINER_DRIVER"
  print_delim

  if [ "$DOCKER_IMAGE_ID" = "$DOCKER_CONTAINER_ID" ]; then 
    echo " ID            :  $DOCKER_IMAGE_ID"
  else
    echo " ID IMG        :  $DOCKER_CONTAINER_ID"
    echo " ID CNT        :  $DOCKER_IMAGE_ID"
  fi

  print_delim
}

docker_start ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi
  if [ "$DOCKER_STATUS" = "running" ]; then echo "Container [$DOCKER_CONTAINER] already started"; return 1; fi

  if [ "$PARAM2" = "live" ]; then
    DOCKER_IT="-ia"
  elif [ "$PARAM2" = "it" ]; then
    DOCKER_IT="-ia"
  else
    DOCKER_IT=""
  fi

  if [ ! -z "$DOCKER_IT" ]; then
    echo "--- Starting Docker Container interative [ Use Ctrl + p q to exit ] ---"
    echo
  fi

  docker start $DOCKER_IT $DOCKER_CONTAINER
 
  return 0
}

docker_stop ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi
  if [ "$DOCKER_STATUS" = "exited" ]; then echo "Container [$DOCKER_CONTAINER] already stopped"; return 1; fi

  if [ "$PARAM2" = "live" ]; then
  	docker attach $DOCKER_CONTAINER --no-stdin &
  fi

  docker stop --time=$DOMINO_SHUTDOWN_TIMEOUT $DOCKER_CONTAINER
}

docker_logs ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi

  echo "--- [BEGIN - $DOCKER_CONTAINER - BEGIN] ---"
  echo
  docker logs $DOCKER_CONTAINER
  echo
  echo "--- [END - $DOCKER_CONTAINER - END] ---"

  return 0
}

docker_run ()
{
  if [ ! -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] already exists [status: $DOCKER_STATUS]"; return 1; fi
  if [ -z "$DOCKER_IMAGE_ID" ]; then echo "Image [$DOCKER_IMAGE] does not exist - please build image first"; return 1; fi

  if [ "$PARAM1" = "runit" ]; then
    DOCKER_IT="yes"
  elif [ "$PARAM2" = "live" ]; then
    DOCKER_IT="yes"
  elif [ "$PARAM2" = "it" ]; then
    DOCKER_IT="yes"
  else
    DOCKER_IT=""
  fi

  if [ ! -z "$DOCKER_IT" ]; then
    echo "--- Running Docker Container interative [ Use Ctrl + p q to exit ] ---"
    echo
    DOCKER_IT="-it"
  else
    DOCKER_IT="-d -it"
  fi

  docker run $DOCKER_IT $DOCKER_PORTS --hostname=$DOCKER_HOSTNAME --env-file $CONFIG_FILE --name $DOCKER_CONTAINER $DOCKER_NETWORK --cap-add=SYS_PTRACE $DOCKER_VOLUMES $DOCKER_IMAGE

  return 0
}

docker_build ()
{
  echo "Building Image : " $IMAGENAME

  if [ "$SOFTWARE_USE_NGINX" = "1" ]; then
    nginx_start
  fi

  docker build --no-cache --label "version"="$DOCKER_IMAGE_VERSION" --label "buildtime"="$BUILDTIME" -t $DOCKER_IMAGE_NAMEVERSION $DOCKER_TAG_LATEST_CMD -f $DOCKER_FILE --build-arg DownloadFrom=$DOWNLOAD_FROM  .
  echo

  if [ "$SOFTWARE_USE_NGINX" = "1" ]; then
    nginx_stop
  fi

  hours=$((SECONDS / 3600))
  seconds=$((SECONDS % 3600))
  minutes=$((seconds / 60))
  seconds=$((seconds % 60))
  h=""; m=""; s=""
  if [ ! $hours = "1" ] ; then h="s"; fi
  if [ ! $minutes = "1" ] ; then m="s"; fi
  if [ ! $seconds = "1" ] ; then s="s"; fi
  if [ ! $hours = 0 ] ; then echo "Completed in $hours hour$h, $minutes minute$m and $seconds second$s"
  elif [ ! $minutes = 0 ] ; then echo "Completed in $minutes minute$m and $seconds second$s"
  else echo "Completed in $seconds second$s"; fi
  echo
  return 0
}

docker_remove ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi
  if [ "$DOCKER_STATUS" = "running" ]; then echo "Container [$DOCKER_CONTAINER] is started -- cannot remove a running container"; return 1; fi

  docker rm $DOCKER_CONTAINER	
  return 0
}

docker_attach ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi
  if [ ! "$DOCKER_STATUS" = "running" ]; then echo "Container [$DOCKER_CONTAINER] not started"; return 1; fi

  echo "--- Attaching to Docker Container [ Use Ctrl + p q to exit ] ---"
  echo
  docker attach $DOCKER_CONTAINER

  return 0
}

docker_removeimage ()
{
  if [ -z "$DOCKER_IMAGE_ID" ]; then echo "Image [$DOCKER_IMAGE] does not exist"; return 1; fi
  if [ ! -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] still exists"; return 1; fi

  docker rmi "$DOCKER_IMAGE"

  if [ ! -z "$DOCKER_TAG_LATEST" ]; then
    docker rmi "$DOCKER_TAG_LATEST"
  fi 

  return 0
}

docker_attach ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi
  if [ ! "$DOCKER_STATUS" = "running" ]; then echo "Container [$DOCKER_CONTAINER] not started"; return 1; fi

  echo "--- Attaching to Docker Container [ Use Ctrl + p q to exit ] ---"
  echo
  docker attach $DOCKER_CONTAINER

  return 0
}

docker_update ()
{
  if [ -z "$DOCKER_STATUS" ]; then echo "Container [$DOCKER_CONTAINER] does not exist"; return 1; fi

  if [ "$DOCKER_CONTAINER_ID" = "$DOCKER_IMAGE_ID" ]; then
    echo " Image did not change -- No Update needed"
    return 0 
  fi
 
  echo "Updating Container [$DOCKER_CONTAINER] ..."
   
  if [ "$DOCKER_STATUS" = "running" ]; then 
    echo "Stopping Container [$DOCKER_CONTAINER] before update ..."
    docker_stop
  fi

  docker_inspect

  echo "Removing Container [$DOCKER_CONTAINER] ..."
  docker_remove
  
  echo "Creating & starting new Container [$DOCKER_CONTAINER] ..."
  docker_inspect
  docker_run

  docker_inspect_image
  docker_inspect
  
  echo
  if [ "$DOCKER_CONTAINER_ID" = "$DOCKER_IMAGE_ID" ]; then
  	echo "Successfully updated Container [$DOCKER_CONTAINER]"
    return 0
  else
  	echo "Failed to updated Container [$DOCKER_CONTAINER]"
    return 1
  fi
}

docker_bash ()
{
  echo "--- Starting bash in Docker [ Use exit to return ] ---"
  echo
  docker exec -it $DOCKER_CONTAINER /bin/bash
  return 0
}

show_version ()
{
  echo "Nash!Com Docker Script Version $DOCKER_SCRIPT_VERSION"
  return 0
}

usage ()
{
  show_version
  echo
  echo "Usage: `basename $SCRIPT_NAME` { build | run | start | stop | status | inspect | logs | attach | domino | bash | remove | removeimage | update | version | help}"

  return 0
}

help ()
{
  usage
  echo
  echo "build          builds a current image -- even image tags might not have changed to ensure OS patches are installed"
  echo "run [live]     runs a container -- will initiate a container if not present ('live' shows start script output, alias 'runit')"
  echo "start [live]   start an existing container (the 'live' option shows start script output)"
  echo "stop  [live]   stops container (the 'live' option shows start script output)"
  echo "status         shows container status (running, exited, notexisting)"
  echo "inspect|info   shows information about container and image"
  echo "logs           shows container logs (output from entry point script/start script)"
  echo "attach         attach to entry point script"
  echo "domino         pass a command to start script (e.g. domino nsd)"
  echo "bash           invokes a bash in the running container"
  echo "remove         removes the container (if not running)"
  echo "removeimage    removes the current container (you have to remove the container first)"
  echo "update         updates the container if referenced image has changed (stops Domino, stops the container, runs a new image)"
  echo "version        shows script version information"
  echo "help           you already figured out what help does ;-)"

  return 0
}


docker_domino_cmd ()
{
  if [ -z "$1" ]; then
    echo "No command specified!"
    return 0
  fi
  
  docker exec -it $DOCKER_CONTAINER "$1" "$2" "$3" "$4" "$5" "$6"

  return 0
}

get_domino_version ()
{
  LOTUS=/opt/ibm/domino
  DOMINO_INSTALL_DAT=$LOTUS/.install.dat

  if [ -e $DOMINO_INSTALL_DAT ]; then

    find_str=`tail "$DOMINO_INSTALL_DAT" | grep "rev = " | awk -F " = " '{print $2}' | tr -d '"'`

    if [ ! -z "$find_str" ]; then
      DOMINO_VERSION=$find_str

      if [ "$DOMINO_VERSION" = "10000000" ]; then
        DOMINO_VERSION=1000
      fi

      if [ "$DOMINO_VERSION" = "90010" ]; then
        DOMINO_VERSION=901
      fi

    else
      DOMINO_VERSION="UNKNOWN"
    fi
  else
    DOMINO_VERSION="NONE"
  fi

  echo "DOMINO_VERSION: [$DOMINO_VERSION]"

  return 0
}

docker_inspect_image
docker_inspect
config_warnings

echo

case "$PARAM1" in
	
  status)
    docker_show_status 
    ;;

  inspect|info)
    docker_show_inspect
    ;;

  build)
    docker_build
    ;;

  run|runit)
    docker_run
    ;;
	  
  start)

    docker_start
    ;;

  logs|log)
    docker_logs
    ;;

  attach)
    docker_attach
    ;;

  stop)
    docker_stop
    ;;

  bash|shell)
    docker_bash
    ;;

  cmd)
    docker_domino_cmd "$PARAM2" "$PARAM3" "$PARAM4" "$PARAM5"
    ;;

  remove)
    docker_remove
    ;;

  removeimage)
    docker_removeimage
    ;;

  update)
    docker_update
    ;;

  domino)
    docker_domino_cmd domino "$PARAM2" "$PARAM3" "$PARAM4" "$PARAM5"
    ;;

  version)
    show_version
    ;;

  help)
    help
    ;;

  *)
    if [ -z "$PARAM1" ]; then
      usage 
    else
      echo "Invalid command:" [$PARAM1]
      usage 
    fi
    ;;

esac

echo 
exit 0
